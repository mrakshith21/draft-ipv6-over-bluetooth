



IPv6 Operations                                                N. Elkins
Internet-Draft                                     Inside Products, Inc.
Intended status: Informational                           M. P. Tahiliani
Expires: 14 November 2024                                       R. Mohan
                                                              T. Sankpal
                                                         S. B. Nidamboor
                                                          NITK Surathkal
                                                             13 May 2024


                          IPv6 Over Bluetooth
                   draft-elkins-v6ops-ipv6blt-latest

Abstract

   RFC 7668 and RFC 9159 describe IPv6 over Bluetooth Low Energy
   networks.  However, the potential of this technology has not been
   fully explored.  This document describes IPv6 over Bluetooth on
   Windows along with an implementation.  It also discusses some use
   cases of this technology beyond BLE networks.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://mrakshith21.github.io/draft-ipv6-over-bluetooth/draft-elkins-
   v6ops-ipv6blt.html.  Status information for this document may be
   found at https://datatracker.ietf.org/doc/draft-elkins-v6ops-
   ipv6blt/.

   Discussion of this document takes place on the IPv6 Operations
   Working Group mailing list (mailto:v6ops@ietf.org), which is archived
   at https://mailarchive.ietf.org/arch/browse/v6ops/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/v6ops/.

   Source for this draft and an issue tracker can be found at
   https://github.com/mrakshith21/draft-ipv6-over-bluetooth.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 14 November 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Background
       1.1.1.  GATT
       1.1.2.  IPv6 over Bluetooth networks and the IPSP
       1.1.3.  Address Configuration
       1.1.4.  Header Compression
   2.  Implementation of IPv6 over Bluetooth on Windows
     2.1.  Architecture
     2.2.  Components
       2.2.1.  Driver
       2.2.2.  Packet Processing App
       2.2.3.  GATT server
       2.2.4.  Bluetooth packet layout
       2.2.5.  Header compression
   3.  Comparison with RFC 7668
   4.  Use cases
     4.1.  Disaster recovery
     4.2.  Near field chat
     4.3.  Connecting IoT Gateways
   5.  Conventions and Definitions
   6.  Security Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Bluetooth is a low-power wireless technology designed for short-range
   control and monitoring applications.  The IETF has produced
   specifications regarding IPv6 over Bluetooth Low Energy devices to
   improve the Internet of Things arena, such as the Internet Protocol
   Support Profile (IPSP).  RFC 7668 [RFC7668] was developed for star
   topology while RFC 9159 [RFC9159] specifies mechanisms to enable IPv6
   mesh over Bluetooth LE links.  However, the potential of this
   technology for non-low powered devices has been unexplored.  This
   document introduces IPv6 over Bluetooth with uncompressed (optional)
   frames as a potential medium for non low powered devices (Windows,
   Linux, Android OS).  It includes an implementation of IPv6 over
   Bluetooth on Windows as an example and discusses use cases of this
   technology.

1.1.  Background

1.1.1.  GATT

   GATT (Generic ATTribute Profile) defines the way that two Bluetooth
   Low Energy devices messages transfer between each other.  It uses a
   generic data protocol called the Attribute Protocol (ATT), which is
   used to store services, and characteristics in a simple lookup table
   with 16-bit IDs (UUIDs).  GATT operates when a dedicated connection
   is established between two devices.

   GATT transactions in BLE are based on high-level, nested objects
   called Profiles, Services, Characteristics and Control Points.
   Services are used to break data up into logical entities, and contain
   specific chunks of data called characteristics.  A service can have
   one or more characteristics, and each service distinguishes itself
   from other services by means of a unique numeric ID called a UUID,
   which can be either 16-bit (for officially adopted BLE Services) or
   128-bit (for custom services).  The lowest level concept in GATT
   transactions is the Characteristic, which encapsulates a single data
   point.  Each characteristic distinguishes itself via a pre-defined
   16-bit or 128-bit UUID.

1.1.2.  IPv6 over Bluetooth networks and the IPSP

   As per RFC 9159 [RFC9159], for IPv6 over BLE mesh networks, a
   multilink model is chosen.  The network consists of nodes 6LN (node),
   6LR (router), and 6LBR (border router).  A 6LN is a peripheral node
   which connects to the network through a 6LR or a 6LBR.  A 6LR
   connects 6LN’s to other 6LR’s or 6LBR.  One or more 6LBRs are
   connected to the Internet.  A router can manage connections with a
   number of peripheral devices, while a peripheral is usually connected
   only to a central node.  A single global unicast prefix is used on
   the whole subnet.  The IPSP enables discovery of IP-enabled devices
   and the establishment of a link-layer connection for transporting
   IPv6 packets.  The IPSP defines the node and router roles for devices
   that consume/originate IPv6 packets and for devices that can route
   IPv6 packets, respectively.

1.1.3.  Address Configuration

   RFC 7668 specifies a stateless address autoconfiguration scheme for
   all nodes in the network.  An IPv6 link-local address is assigned to
   the Bluetooth interface based on the 48-bit Bluetooth device address.
   A 64-bit address is generated from the Bluetooth address, which is
   prepended with fe80::/64.  Mechanisms for registering a non link
   local address, and multiple addresses are also provided.

1.1.4.  Header Compression

   Since BLE communication aims to conserve power, IPv6 over BLE
   involves header compression to reduce the size of IPv6 packets.  This
   compression is based on the 6LoWPAN IPv6 header compression as
   specified in RFC 6282.  However, since the document focuses mainly on
   IPv6 over Bluetooth for non low powered devices, header compression
   is optional.

2.  Implementation of IPv6 over Bluetooth on Windows

   In this section, we describe an implementation of IPv6 over Bluetooth
   on Windows.

2.1.  Architecture

   There are two primary components to this project:

   *  WFP callout driver

   *  Packet processing app

   Additionally, there are four DLL libraries in this project to support
   functionality in the packet processing app:

   *  A custom driver interoperability library.

   *  A Bluetooth GATT library, also including device enumeration and
      discovery.

   *  A 6LoWPAN library.

   The following diagram illustrates the system architecture for this
   solution:

   The componets described in the diagram are briefly described below:

                    +--------------+
                    |    6LoWPAN   |
                    | library (DLL)|
                    +--------------+
                                                       |
                           |
                           |
+----------------+        +--------------+       +----------------+
 | Driver interop |      |    Packet    |        | Bluetooth GATT |
 | library (DLL)  |--|  processing  |--| library (DLL)  |
 +----------------+      |    UWP app   |        +----------------+
          |          +--------------+                    |
          +------------------+                                 |
User mode                                        |                                     |
-----------------------------|------------------|----------
Kernel mode                                    |                                       |
                                                         |                                     |
 +--------------+                         |                      +--------------+
 |      UDP     |                         |                      | Bluetooth LE |
 +--------------+         +---------------+    +--------------+
 |     IPv6     |         |  WFP callout  |        |   Bluetooth  |
 +--------------+         |    driver     |        |     L2CAP    |
 |Wi-Fi/Ethernet|   |(IPv6ToBle.sys)|      +--------------+
 +--------------+   +---------------+

                        Figure 1: Architecture

   *  WFP Callout Driver (IPv6ToBle.sys): This driver acts as a bridge
      between the TCP/IP stack and the Bluetooth stack, filtering
      traffic destined for BLE devices and managing outbound traffic.

   *  Packet Processing App: This user-mode component completes the
      bridge between TCP/IP and Bluetooth LE stacks.  It handles tasks
      like obtaining IPv6 addresses, scanning for compatible BLE
      devices, compressing IPv6 headers, and transferring packets over
      BLE.

   *  Driver Interop Library: Used by the packet processing app to
      communicate with the driver, supporting both synchronous and
      asynchronous commands.

   *  Bluetooth GATT Library: Encompasses GATT server and client
      functionality, advertising services and facilitating packet
      transfer between devices.

   *  6LoWPAN Library: Implements header compression and stateless auto-
      configuration, for BLE communication.

2.2.  Components

   The following are the components involved in the implementation of
   the IPv6 over Bluetooth in Windows operating system.

2.2.1.  Driver

   The driver acts as a bridge between the Windows TCP/IP network stack
   and the Bluetooth stack.  It filters outgoing IPv6 packets for the
   nodes running in the BLE network.  These packets are then processed
   by the packet processing app.  The driver can also filter incoming
   IPv6 packets and inject them into the TCP/IP stack.

2.2.2.  Packet Processing App

   This is a core component that is a part of the bridge along with the
   driver.  Firstly, it obtains a link-local address based on the
   Bluetooth address.  It also scans for nearby devices and identifies
   compatible ones.  Then, it subscribes and receives IPv6 packets from
   the driver.  After compressing the header, it transfers the packet
   over to nearby compatible devices.  The packet processing app on the
   other device receives the packet.  If it is for that device, it sends
   it to the driver for inbound injection into the TCP/IP network stack,
   otherwise, sends the packet to each nearby device.

2.2.3.  GATT server

   The GATT server is started by the packet processing app.  It contains
   the Internet Protocol Support Service (ISPS), which indicates that
   the server supports IPv6 over Bluetooth.  The server runs on all
   nodes, and nodes can act as both client and server depending on
   whether they receive or send the packet.

2.2.4.  Bluetooth packet layout

   An IPv6 over BLE packet consists of an IPv6 packet embedded in a
   Bluetooth packet.  It consists of the following:

   +--------------------------+
   |                          |
   |       Packet Layout      |
   |                          |
   +--------------------------+

                          Figure 2: Packet layout

   A custom lua dissector to dissect the IPv6 packet within the
   Bluetooth ATT Value field was designed.  In the application, the IPv6
   packet is written to a GATT characteristic with handle 0x0018.  So,
   the custom dissector is invoked when the ATT handle’s value is
   0x0018.  The buffer is then passed to the in builtipv6 dissector
   which dissects the data in the ‘Value’ field.

2.2.5.  Header compression

   Header compression is implemented as a library (named 6LoWPAN
   library), not as an operating system layer or module.  The
   compression/decompression code was based on Contiki OS, an open
   source operating system in which 6LoWPAn is implemented as an
   adaptation layer in the network stack.  This is not possible on
   Windows because it is closed source.  Therefore, the concept of an
   adaptation layer is spread across the driver and this module Thus,
   the header compression code lies in the user space, as a library.

   *  While the packet processing app receives a packet from the driver,
      the 6LoWPAN library is called to compress the header, before
      sending it over Bluetooth.

   *  Similarly, when a packet is received over Bluetooth, the 6LoWPAN
      library is called to decompress the header.

3.  Comparison with RFC 7668

   RFC 7668 [RFC7668] specifies RFC 6282 [RFC6282] for 6LoWPAN

   *  Header compression

   *  Fragmentation and reassembly

   *  Stateless auto configuration

   The LoWPAN library of the project fulfills the first and third goals,
   the second goal is automatically performed at the Bluetooth L2CAP
   layer by Windows Bluetooth.  In particular, IPv6 header compression
   is implemented as per RFC 6282 [RFC6282], and IPv6 address
   compression is implemented as per RFC 7668 [RFC7668].

4.  Use cases

   IPv6 over Bluetooth can be used as an alternate technology for
   connecting devices, while using the vast features of IP as well as a
   low powered interface using Bluetooth.

4.1.  Disaster recovery

   In case of scenarios such as natural disasters, Internet failures or
   shutdown, the area loses its ability to connect to the world through
   IP.  This may be the result due to cable cuts or mobile tower
   failures.  However, a local network can indeed be formed using IPv6
   over Bluetooth.

   We make the assumption that devices are Bluetooth enabled and are in
   Bluetooth range, so as to form a network of Bluetooth devices.  As
   described in RFC 9159 [RFC9159] IPv6 over Bluetooth for Mesh
   Networks, devices can then take up the roles similar to a 6LN, or
   6LR.  In other words, some devices act as nodes, and some as routers
   as well.  Note that routers forward packets only within the network.
   In the event that the Internet is accessible for some of the devices,
   they can act as 6LBR or border routers.  With the IPv6 over Bluetooth
   layer available on the devices, applications can continue to use IP
   while the actual communication uses Bluetooth.  This idea can be
   backed by the fact that Bluetooth is available not only on PCs but
   mobile phones as well, which leads to the formation of a network with
   more links.

   There are some things to consider:

   *  Devices must enforce IPv6 over IPv4 since the technology is only
      designed to transmit IPv6 packets over Bluetooth.

   *  Selection of devices as routers, or border routers is a key
      challenge.  The border router must ensure that devices in its
      domain have unique addresses.  The network also needs to have an
      IPv6 prefix, which is to be determined.

4.2.  Near field chat

4.3.  Connecting IoT Gateways

5.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

6.  Security Considerations

   The security considerations specified in RFC 7668 [RFC7668] apply for
   IPv6 over Bluetooth in non lower powered devices as well.  RFC 7416
   [RFC7416] provides an overview of such threats.  Particularly, the
   routing protocol poses opportunities for threats and attacks.
   Considering that devices are not resource constrained, the scale of
   threats can only increase.

7.  IANA Considerations

   This document has no IANA actions.

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

8.2.  Informative References

   [RFC6282]  Hui, J., Ed. and P. Thubert, "Compression Format for IPv6
              Datagrams over IEEE 802.15.4-Based Networks", RFC 6282,
              DOI 10.17487/RFC6282, September 2011,
              <https://www.rfc-editor.org/rfc/rfc6282>.

   [RFC7416]  Tsao, T., Alexander, R., Dohler, M., Daza, V., Lozano, A.,
              and M. Richardson, Ed., "A Security Threat Analysis for
              the Routing Protocol for Low-Power and Lossy Networks
              (RPLs)", RFC 7416, DOI 10.17487/RFC7416, January 2015,
              <https://www.rfc-editor.org/rfc/rfc7416>.

   [RFC7668]  Nieminen, J., Savolainen, T., Isomaki, M., Patil, B.,
              Shelby, Z., and C. Gomez, "IPv6 over BLUETOOTH(R) Low
              Energy", RFC 7668, DOI 10.17487/RFC7668, October 2015,
              <https://www.rfc-editor.org/rfc/rfc7668>.

   [RFC9159]  Gomez, C., Darroudi, S.M., Savolainen, T., and M. Spoerk,
              "IPv6 Mesh over BLUETOOTH(R) Low Energy Using the Internet
              Protocol Support Profile (IPSP)", RFC 9159,
              DOI 10.17487/RFC9159, December 2021,
              <https://www.rfc-editor.org/rfc/rfc9159>.

Acknowledgments

   The authors would like to acknowledge the developer of
   IPv6OverBluetoothLowEnergyMesh (https://github.com/uwbiot/
   IPv6OverBluetoothLowEnergyMesh), for his contribution of a Windows
   implementation for IPv6 over Bluetooth.

Authors' Addresses

   Nalini Elkins
   Inside Products, Inc.
   Email: nalini.elkins@insidethestack.com


   Mohit P. Tahiliani
   NITK Surathkal
   Email: tahiliani@nitk.edu.in


   Rakshith Mohan
   NITK Surathkal
   Email: rakshith21mohan@gmail.com


   Tejas Sankpal
   NITK Surathkal
   Email: tejas@gmail.com


   Shrinidhi Ballal Nidamboor
   NITK Surathkal
   Email: ballalshrinidhi@gmail.com
